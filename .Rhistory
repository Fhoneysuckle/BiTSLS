devtools::build("BiTSLS")
library(devtools)
library(BiTSLS)
library(readr)
levitt20 <- read_csv("~/Desktop/Bidirection Paper/Submit/Code/real data/levitt20.csv")
View(levitt20)
library(readr)
data <- read_csv("~/Desktop/Bidirection Paper/Submit/Code/real data/levitt20.csv")
View(levitt20)
# 运行基本的 Bi-TSLS 估计
result <- bi_tsls(
data = data,
x_var = "X变量名",
y_var = "Y变量名",
z_var = "Z工具变量名",
w_var = "W工具变量名",
controls = c("控制变量1", "控制变量2", "控制变量3"), # 可选，如果为NULL则使用所有其他变量
standardize_vars = TRUE  # 是否标准化变量
)
install.packages("devtools")
devtools::document("BiTSLS")
getwd()
devtools::document()
bi_tsls()
View(data)
library(BiTSLS)
# 加载数据
data <- read.csv("你的数据.csv")
library(BiTSLS)
# 加载数据
# 运行基本的 Bi-TSLS 估计
result <- bi_tsls(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = NULL, # 可选，如果为NULL则使用所有其他变量
standardize_vars = TRUE  # 是否标准化变量
)
data <- data[,-c("year", "fips")]
data <- data[, -which(names(data) %in% c("year", "fips"))]
library(BiTSLS)
# 加载数据
# 运行基本的 Bi-TSLS 估计
result <- bi_tsls(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = NULL, # 可选，如果为NULL则使用所有其他变量
standardize_vars = TRUE  # 是否标准化变量
)
names(data)[grep("^V", names(data))]
grep("^V", names(data))
names
names(data)
names(data)
library(BiTSLS)
# 加载数据
# 运行基本的 Bi-TSLS 估计
result <- bi_tsls(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
standardize_vars = TRUE  # 是否标准化变量
)
# 查看结果
print(result)
library(BiTSLS)
# 加载数据
# 运行基本的 Bi-TSLS 估计
result <- bi_tsls(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
standardize_vars = TRUE  # 是否标准化变量
)
# 查看结果
print(result)
library(BiTSLS)
# 加载数据
# 运行基本的 Bi-TSLS 估计
result <- bi_tsls(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
standardize_vars = TRUE  # 是否标准化变量
)
# 查看结果
print(result)
library(BiTSLS)
# 加载数据
# 运行基本的 Bi-TSLS 估计
result <- bi_tsls(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
standardize_vars = TRUE  # 是否标准化变量
)
# 查看结果
print(result)
library(BiTSLS)
# 加载数据
# 运行基本的 Bi-TSLS 估计
result <- bi_tsls(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
standardize_vars = TRUE  # 是否标准化变量
)
# 查看结果
print(result)
# 运行完整的敏感性分析
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
start_value = -0.5,   # R_w 的起始值（R_z 将为相反值）
step_size = 0.1,      # R 值的变化步长
num_steps = 10,       # 步数 (从 -0.5 到 0.5)
num_iterations = 500, # 每个 R 组合的自助法迭代次数
parallel = TRUE,      # 使用并行计算
plot = TRUE           # 生成图表
)
use warnings()
warnings()
# 运行完整的敏感性分析
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
start_value = -0.5,   # R_w 的起始值（R_z 将为相反值）
step_size = 0.1,      # R 值的变化步长
num_steps = 10,       # 步数 (从 -0.5 到 0.5)
num_iterations = 500, # 每个 R 组合的自助法迭代次数
parallel = TRUE,      # 使用并行计算
plot = TRUE           # 生成图表
)
warning()
# 运行完整的敏感性分析
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
start_value = -0.5,   # R_w 的起始值（R_z 将为相反值）
step_size = 0.1,      # R 值的变化步长
num_steps = 10,       # 步数 (从 -0.5 到 0.5)
num_iterations = 500, # 每个 R 组合的自助法迭代次数
parallel = TRUE,      # 使用并行计算
plot = TRUE           # 生成图表
)
devtools::document()
devtools::install()
library(BiTSLS)
# 运行完整的敏感性分析
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
start_value = -0.5,   # R_w 的起始值（R_z 将为相反值）
step_size = 0.1,      # R 值的变化步长
num_steps = 10,       # 步数 (从 -0.5 到 0.5)
num_iterations = 500, # 每个 R 组合的自助法迭代次数
parallel = TRUE,      # 使用并行计算
plot = TRUE           # 生成图表
)
remove.packages("BiTSLS")
.rs.restartR()
# 检查当前工作目录
getwd()
# 重新构建和安装包
devtools::build("BiTSLS")
# 检查当前工作目录
getwd()
# 重新构建和安装包
devtools::build()
devtools::install("BiTSLS")
# 运行完整的敏感性分析
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
start_value = -0.5,   # R_w 的起始值（R_z 将为相反值）
step_size = 0.1,      # R 值的变化步长
num_steps = 10,       # 步数 (从 -0.5 到 0.5)
num_iterations = 500, # 每个 R 组合的自助法迭代次数
parallel = TRUE,      # 使用并行计算
plot = TRUE           # 生成图表
)
# 查看图表
analysis$plots$xy_plot  # X 到 Y 的因果效应图
analysis$plots$yx_plot  # Y 到 X 的因果效应图
warning()
?bi_tsls
?bi_tsls
# 运行完整的敏感性分析
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
start_value = -0.5,   # R_w 的起始值（R_z 将为相反值）
step_size = 0.1,      # R 值的变化步长
num_steps = 10,       # 步数 (从 -0.5 到 0.5)
num_iterations = 500, # 每个 R 组合的自助法迭代次数
parallel = TRUE,      # 使用并行计算
plot = TRUE           # 生成图表
)
?bi_tsls
# 运行完整的敏感性分析
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
start_value = -0.5,   # R_w 的起始值（R_z 将为相反值）
step_size = 0.1,      # R 值的变化步长
num_steps = 10,       # 步数 (从 -0.5 到 0.5)
num_iterations = 500, # 每个 R 组合的自助法迭代次数
parallel = TRUE,      # 使用并行计算
plot = TRUE           # 生成图表
)
remove.packages("BiTSLS")
.rs.restartR()
devtools::build()
devtools::install("BiTSLS")
devtools::build()
devtools::install()
library(BiTSLS)
?bi_tsls
?run_bi_tsls_analysis
# 运行完整的敏感性分析
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
controls = c("population", "unemp", "income", "pover"), # 可选，如果为NULL则使用所有其他变量
start_value = -0.5,   # R_w 的起始值（R_z 将为相反值）
step_size = 0.1,      # R 值的变化步长
num_steps = 10,       # 步数 (从 -0.5 到 0.5)
num_iterations = 500, # 每个 R 组合的自助法迭代次数
parallel = TRUE,      # 使用并行计算
plot = TRUE           # 生成图表
)
View(data)
analysis <- run_bi_tsls_analysis(
data = data,
x_var = "ear_murd",
y_var = "murder_rate",
z_var = "afdc15",
w_var = "prison",
covariates = c("population", "unemp", "income", "pover"), # 改为 covariates
start_value = -0.5,
step_size = 0.1,
num_steps = 10,
num_iterations = 500,
parallel = TRUE,
plot = TRUE
)
# 查看图表
analysis$plots$xy_plot  # X 到 Y 的因果效应图
analysis$plots$yx_plot  # Y 到 X 的因果效应图
remove.packages("BiTSLS", lib="~/Library/R/arm64/4.3/library")
install.packages("BiTSLS")
